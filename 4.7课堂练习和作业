{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d1c2574f",
   "metadata": {},
   "source": [
    "# 4.7课堂练习和作业"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7e6f9d77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adding mushrooms.\n",
      "Adding green peppers.\n",
      "Adding extra cheese.\n",
      "\n",
      "Finished making your pizza!\n"
     ]
    }
   ],
   "source": [
    "reqested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n",
    "for requested_topping in reqested_toppings:\n",
    "    print(f\"Adding {requested_topping}.\")\n",
    "print(\"\\nFinished making your pizza!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2caf5396",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adding mushrooms.\n",
      "Sorry, we are out of green peppers right now.\n",
      "Adding extra cheese.\n",
      "\n",
      "Finished making your pizza!\n"
     ]
    }
   ],
   "source": [
    "requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n",
    "\n",
    "for requested_topping in requested_toppings:\n",
    "    if requested_topping == 'green peppers':\n",
    "        print(\"Sorry, we are out of green peppers right now.\")\n",
    "    else:\n",
    "        print(f\"Adding {requested_topping}.\")\n",
    "\n",
    "print(\"\\nFinished making your pizza!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2637f3af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Are you sure you want a plain pizza?\n"
     ]
    }
   ],
   "source": [
    "requested_toppings = []\n",
    "\n",
    "if requested_toppings:\n",
    "    for requested_topping in requested_toppings:\n",
    "        print(f\"Adding {requested_topping},\")\n",
    "    print(\"\\nFinished making your pizza!\")\n",
    "else:\n",
    "    print(\"Are you sure you want a plain pizza?\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08f48217",
   "metadata": {},
   "source": [
    "# 作业"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40aa5da2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello admin, would you like to see a status report?\n",
      "Hello Jaden, thank you for logging in again.\n",
      "Hello Emma, thank you for logging in again.\n",
      "Hello Noah, thank you for logging in again.\n",
      "Hello Sophia, thank you for logging in again.\n"
     ]
    }
   ],
   "source": [
    "# 创建包含至少 5 个用户名的列表\n",
    "usernames = ['admin', 'jaden', 'emma', 'noah', 'sophia']\n",
    "\n",
    "# 打印问候消息\n",
    "if usernames:  # 检查用户名列表是否为空\n",
    "    for username in usernames:\n",
    "        if username == 'admin':\n",
    "            print(\"Hello admin, would you like to see a status report?\")\n",
    "        else:\n",
    "            print(f\"Hello {username.title()}, thank you for logging in again.\")\n",
    "else:\n",
    "    print(\"We need to find some users!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "41105f74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorry, the username 'jaden' is already taken. Please choose a different username.\n",
      "Sorry, the username 'emma' is already taken. Please choose a different username.\n",
      "The username 'owen' is available.\n",
      "The username 'liam' is available.\n",
      "Sorry, the username 'sophia' is already taken. Please choose a different username.\n"
     ]
    }
   ],
   "source": [
    "# 创建 current_users 列表\n",
    "current_users = ['admin', 'jaden', 'emma', 'noah', 'sophia']\n",
    "\n",
    "# 创建 new_users 列表\n",
    "new_users = ['jaden', 'emma', 'owen', 'liam', 'sophia']\n",
    "\n",
    "# 将 current_users 列表中的用户名都转换为小写\n",
    "current_users_lower = [user.lower() for user in current_users]\n",
    "\n",
    "# 遍历 new_users 列表，检查每个用户名是否已被使用\n",
    "for user in new_users:\n",
    "    if user.lower() in current_users_lower:\n",
    "        print(f\"Sorry, the username '{user}' is already taken. Please choose a different username.\")\n",
    "    else:\n",
    "        print(f\"The username '{user}' is available.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "faf5c7ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st\n",
      "2nd\n",
      "3rd\n",
      "4th\n",
      "5th\n",
      "6th\n",
      "7th\n",
      "8th\n",
      "9th\n"
     ]
    }
   ],
   "source": [
    "# 存储数字 1~9 的列表\n",
    "numbers = list(range(1, 10))\n",
    "\n",
    "# 遍历列表并打印每个数字对应的序数\n",
    "for number in numbers:\n",
    "    if number == 1:\n",
    "        print(f\"{number}st\")\n",
    "    elif number == 2:\n",
    "        print(f\"{number}nd\")\n",
    "    elif number == 3:\n",
    "        print(f\"{number}rd\")\n",
    "    else:\n",
    "        print(f\"{number}th\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4eaadf3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are an adult.\n"
     ]
    }
   ],
   "source": [
    "age = 18\n",
    "if age >= 18:\n",
    "    print(\"You are an adult.\")\n",
    "else:\n",
    "    print(\"You are not yet an adult.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b79af725",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
